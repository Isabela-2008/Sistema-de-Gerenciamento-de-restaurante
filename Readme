Enunciado
Sistema de Gerenciamento de Restaurante

O objetivo deste projeto é desenvolver um banco de dados para gerenciar as operações de um restaurante. O banco de dados deve permitir o registro e a manipulação de informações sobre clientes, mesas, pedidos e itens dos pedidos. A seguir estão os requisitos e passos para a criação e manipulação do banco de dados:

Passos:

Criar o Banco de Dados: Crie um banco de dados chamado RestauranteDB.
Criar as Tabelas:
Clientes: Armazena informações dos clientes, incluindo ID, nome, telefone e email.
Mesas: Gerencia as mesas do restaurante, armazenando o número da mesa e a capacidade.
Pedidos: Registra os pedidos feitos pelos clientes, incluindo o ID do cliente, ID da mesa, data e hora do pedido, e o total do pedido.
Itens_Pedido: Gerencia os itens de cada pedido, incluindo a descrição do item, quantidade, preço unitário e o ID do pedido associado.
Inserir Dados: Adicione registros fictícios nas tabelas Clientes, Mesas, Pedidos e Itens_Pedido.
Consultar Dados: Execute consultas para listar todos os clientes, mesas e pedidos. Crie uma consulta para mostrar todos os itens de um pedido específico, incluindo o total do pedido.
Atualizar Dados: Atualize as informações de um cliente e de uma mesa.
Deletar Dados: Exclua um pedido e todos os itens relacionados a ele.
Objetivos:

Utilizar comandos SQL para criar e manipular um banco de dados funcional.
Garantir a integridade referencial entre as tabelas.
Implementar consultas para obter e visualizar informações relevantes.
Praticar a atualização e exclusão de dados mantendo a integridade do banco de dados.

README
Sistema de Gerenciamento de Restaurante
Este projeto configura um banco de dados para um restaurante, utilizando o MySQL. O banco de dados é projetado para gerenciar clientes, mesas, pedidos e itens de pedidos.

Requisitos
MySQL ou MariaDB
Um cliente SQL (ex: MySQL Workbench, phpMyAdmin, linha de comando MySQL)
Estrutura do Banco de Dados
Banco de Dados: RestauranteDB
Tabelas:
Clientes: Armazena informações dos clientes.
Mesas: Armazena informações sobre as mesas do restaurante.
Pedidos: Registra os pedidos feitos pelos clientes.
Itens_Pedido: Registra os itens de cada pedido.
Instruções
1. Criar o Banco de Dados
sql
Copiar código
CREATE DATABASE IF NOT EXISTS RestauranteDB;
USE RestauranteDB;
2. Criar as Tabelas
sql
Copiar código
-- Tabela Clientes
CREATE TABLE IF NOT EXISTS Clientes (
    id_cliente INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    telefone VARCHAR(15),
    email VARCHAR(100)
);

-- Tabela Mesas
CREATE TABLE IF NOT EXISTS Mesas (
    id_mesa INT AUTO_INCREMENT PRIMARY KEY,
    numero_mesa INT NOT NULL,
    capacidade INT NOT NULL
);

-- Tabela Pedidos
CREATE TABLE IF NOT EXISTS Pedidos (
    id_pedido INT AUTO_INCREMENT PRIMARY KEY,
    id_cliente INT NOT NULL,
    id_mesa INT NOT NULL,
    data_pedido DATETIME NOT NULL,
    total DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (id_cliente) REFERENCES Clientes(id_cliente),
    FOREIGN KEY (id_mesa) REFERENCES Mesas(id_mesa)
);

-- Tabela Itens_Pedido
CREATE TABLE IF NOT EXISTS Itens_Pedido (
    id_item INT AUTO_INCREMENT PRIMARY KEY,
    id_pedido INT NOT NULL,
    descricao_item VARCHAR(255) NOT NULL,
    quantidade INT NOT NULL,
    preco_unitario DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (id_pedido) REFERENCES Pedidos(id_pedido) ON DELETE CASCADE
);
3. Inserir Dados
sql
Copiar código
-- Inserir dados na tabela Clientes
INSERT INTO Clientes (nome, telefone, email) VALUES
('João Silva', '123456789', 'joao.silva@example.com'),
('Maria Oliveira', '987654321', 'maria.oliveira@example.com');

-- Inserir dados na tabela Mesas
INSERT INTO Mesas (numero_mesa, capacidade) VALUES
(1, 4),
(2, 2),
(3, 6);

-- Inserir dados na tabela Pedidos
INSERT INTO Pedidos (id_cliente, id_mesa, data_pedido, total) VALUES
(1, 1, '2024-09-01 19:00:00', 150.00),
(2, 2, '2024-09-01 20:00:00', 75.00);

-- Inserir dados na tabela Itens_Pedido
INSERT INTO Itens_Pedido (id_pedido, descricao_item, quantidade, preco_unitario) VALUES
(1, 'Pizza Margherita', 2, 25.00),
(1, 'Refrigerante', 3, 5.00),
(2, 'Espaguete à Carbonara', 1, 30.00),
(2, 'Cerveja', 2, 10.00);
4. Consultar Dados
sql
Copiar código
-- Listar todos os clientes
SELECT * FROM Clientes;

-- Listar todas as mesas
SELECT * FROM Mesas;

-- Listar todos os pedidos
SELECT * FROM Pedidos;

-- Mostrar todos os itens de um pedido específico e o total do pedido
-- Substitua 1 pelo id_pedido desejado
SELECT 
    i.descricao_item AS 'Descrição Item',
    i.quantidade AS 'Quantidade',
    i.preco_unitario AS 'Preço Unitário',
    (i.quantidade * i.preco_unitario) AS 'Total Item',
    p.total AS 'Total Pedido'
FROM 
    Itens_Pedido i
JOIN 
    Pedidos p ON i.id_pedido = p.id_pedido
WHERE 
    i.id_pedido = 1;
5. Atualizar Dados
sql
Copiar código
-- Atualizar informações de um cliente
UPDATE Clientes
SET nome = 'João Silva Junior', telefone = '111222333', email = 'joao.junior@example.com'
WHERE id_cliente = 1;

-- Atualizar informações de uma mesa
UPDATE Mesas
SET capacidade = 8
WHERE id_mesa = 3;
6. Deletar Dados
sql
Copiar código
-- Excluir um pedido e todos os itens relacionados a ele
-- Substitua 1 pelo id_pedido desejado
START TRANSACTION;

-- Excluir o pedido
DELETE FROM Pedidos
WHERE id_pedido = 1;

-- A exclusão dos itens do pedido será feita automaticamente devido ao ON DELETE CASCADE
COMMIT;
